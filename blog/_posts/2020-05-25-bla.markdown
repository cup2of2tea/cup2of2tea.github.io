---
layout: post
title:  "Where is Guido"
date:   2019-12-02 20:47:08 +0100
categories: jekyll update
---

Jeudi 20 février s'était déroulé une compétition d'optimisation algorithmique "Google Hash Code".
Insalgo nous a accueilli à son hub, @matleg, @MrFlibble et moi-même (@cup_of_tea).

Cet article a pour but de retracer notre cheminement durant le concours, aussi bien que les impasses et les bonnes pistes.
En deuxième partie, on verra ensemble comment appliquer une méthode de programmation particulière (programmation entière) au problème, et si cela fonctionne.


BLABLABLA
aze


# Programmation entière

Je vais d'abord présenter la version que l'on a pu exploiter pour améliorer notre score, avant de présenter une version plus ambitieuse (mais qui ne fonctionne pas).

La première version se greffe en sortie du solveur que l'on avait déjà développé, et récupère la sortie générée pour l'optimiser:

- On garde les librairies et l'ordre dans lesquelles celles-ci ont été ajoutées
- On optimise seulement les livres qui sont affectés à telle ou telle librairie

Pour cette version, une seule matrice de variables est définie:
- book_is_in_librairie[][], la variable books_is_in_librairie[b][l] étant à 0 si le livre b est embarqué par la librairie l

Pour avoir une matrice de dimension réduite, on applique l'optimisation suivante:
- on ne garde que les livres qui sont au moins une fois dans les librairies de la solution

Ensuite, viennent l'expression des contraintes de l'énoncé sous la forme d'inégalités.

Un livre ne doit pas être présent dans plusieurs librairies:
{% highlight python %}
  Pour chaque livre b:
    0 <= (La somme de books_is_in_librairie[b][l] avec l € [0,L-1]) <= 1
{% endhighlight %}

{% highlight python %}
for i in range(nbBooks):
    constraint = solver.Constraint(0,1)
    for j in range(len(outputOrder)):
        if(books[i][1] not in libsBooks[outputOrder[d]]):
          constraint.SetCoefficient(book_step[i][j],1)
{% endhighlight %}

Un livre ne doit pas être ajouté dans une librairie qui ne le contient pas:
{% highlight python %}
  Pour chaque livre b:
    0 <= (La somme de books_is_in_librairie[b][l] avec l € [0,L-1] et b n\'appartient pas à l)  <= 0
{% endhighlight %}

{% highlight python %}
for i in range(nbBooks):
    constraint = solver.Constraint(0,0)
    for d in range(len(outputOrder)):
        if(books[i][1] not in libsBooks[outputOrder[d]]):
            constraint.SetCoefficient(book_step[i][d],1)
{% endhighlight %}

Si une librairie a terminé son inscription le jour d, alors elle ne peut pas scanner plus de (maxDays-d)\*shipping livres.
{% highlight python %}
  Pour chaque librairie l:
    0 <= (La somme de books_is_in_librairie[b][l] avec l € [0,L-1] et b n\'appartient pas à l)  <= (maxDays-d)*shipping
{% endhighlight %}

{% highlight python %}
signIn = 0
for i in range(len(outputOrder)):
    signIn += libsDuration[outputOrder[i]]
    # On ne peut pas en avoir plus que (jours - signIn)*libsShip
    constraint = solver.Constraint(0,max(0,(days-signIn)*libsShip[outputOrder[i]]))
    for j in range(nbBooks):
        constraint.SetCoefficient(book_step[j][i],1)
print(solver.NumConstraints())
{% endhighlight %}


You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

Jekyll requires blog post files to be named according to the following format:

`YEAR-MONTH-DAY-title.MARKUP`

Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:

{% highlight ruby %}
def print_hi(name)
  puts "Hi, #{name}"
end
print_hi('Tom')
#=> prints 'Hi, Tom' to STDOUT.
{% endhighlight %}

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll’s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
